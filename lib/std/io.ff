/* io.ff - standard input/output
   Copyright (c) 2023 mini-rose */

type file_t {
	fp: &i8
	path: str
	is_open: bool
}

/**
 * Open a file_t.
 *
 * @param path: path to the file_t
 * @param mode: either "w" for write or "r" for read
 *              default is "r"
 */
fn open(path: &str, mode: &str) -> file_t {
	f: file_t

	__builtin_decl("_open", &i8, &str, &str)
	f.fp = _open(path, mode)
	f.is_open = true
	f.path = *path

	ret f
}

fn open(path: str, mode: str) -> file_t {
	ret open(&path, &mode)
}

/**
 * Close a file_t.
 *
 * @param self: the file_t to close
 */
fn close(self: &file_t) {
	__builtin_decl("_close", null, &i8)
	_close(self.fp)
}

/**
 * Write a string into the file_t.
 *
 * @param self: file_t to write to
 * @param buf: string to write
 */
fn write(self: &file_t, buf: str) -> null {
	__builtin_decl("_write", null, &i8, &i8, i64)
	_write(self.fp, buf.ptr, buf.len)
}

/**
 * Write a string into a stream, which is marked as a file_t descriptor.
 *
 * @param stream: 1 for stdout, 2 for stderr
 * @param buf: string to write
 */
fn write_stream(stream: i32, buf: str) -> null {
	__builtin_decl("_write_stream", null, i32, &i8, i64)
	_write_stream(stream, buf.ptr, buf.len)
}

/**
 * Read a n_chars from the file_t.
 *
 * @param self: file_t to read from
 * @param n_chars: n characters
 */
fn read(self: &file_t, n_chars: i32) -> &str {
	__builtin_decl("_read", &str, &i8, i32)
	ret _read(self.fp, n_chars)
}

fn read(self: file_t, n_chars: i32) -> &str {
	ret read(&self, n_chars)
}

/**
 * Read a line from the file_t.
 *
 * @param self: file_t to read from
 */
fn readline(self: &file_t) -> &str {
	__builtin_decl("_readline", &str, &i8)
	ret _readline(self.fp)
}

fn readline(self: file_t) -> &str {
	ret readline(&self)
}

fn copy(self: &file_t, other: &file_t) -> null {
	self.fp = other.fp
	self.is_open = other.is_open
}

fn drop(self: &file_t) -> null {
	drop(&self.path)

	(self.is_open) ? {
		close(self)
	}
}

/* These printing routines print the object and a newline. */
__builtin_decl_mangled("print", null, i8)
__builtin_decl_mangled("print", null, i32)
__builtin_decl_mangled("print", null, i64)
__builtin_decl_mangled("print", null, &str)
__builtin_decl_mangled("print", null, bool)

fn print(__s: str) -> null {
	print(&__s)
}
